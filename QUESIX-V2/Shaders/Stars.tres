[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id=2]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "velocity"

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;
uniform float velocity;



void vertex() {
// Input:4
	vec3 n_out4p0 = vec3(UV,0.0);

// Input:2
	float n_out2p0 = TIME;

// ScalarUniform:7
	float n_out7p0 = velocity;

// ScalarOp:6
	float n_out6p0 = n_out2p0 * n_out7p0;

// VectorCompose:3
	float n_in3p0 = 0.00000;
	float n_in3p2 = 0.00000;
	vec3 n_out3p0 = vec3(n_in3p0, n_out6p0, n_in3p2);

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 + n_out3p0;

// Output:0
	UV = n_out5p0.xy;

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource( 1 )
nodes/vertex/2/position = Vector2( -440, 180 )
nodes/vertex/3/node = SubResource( 2 )
nodes/vertex/3/position = Vector2( -20, 240 )
nodes/vertex/4/node = SubResource( 3 )
nodes/vertex/4/position = Vector2( -20, 80 )
nodes/vertex/5/node = SubResource( 4 )
nodes/vertex/5/position = Vector2( 213, 160.5 )
nodes/vertex/6/node = SubResource( 5 )
nodes/vertex/6/position = Vector2( -260, 300 )
nodes/vertex/7/node = SubResource( 6 )
nodes/vertex/7/position = Vector2( -580, 340 )
nodes/vertex/connections = PoolIntArray( 4, 0, 5, 0, 3, 0, 5, 1, 5, 0, 0, 1, 2, 0, 6, 0, 6, 0, 3, 1, 7, 0, 6, 1 )

[resource]
shader = SubResource( 7 )
shader_param/velocity = -0.1
